TableGan Documentation

Generator Class
Purpose: The Generator class is designed to generate new data instances that mimic the real data distribution. In the context of GANs, it learns to generate plausible data.
Constructor (__init__ method):
z_dim: The dimensionality of the latent space from which the generator produces data. It's typically a random noise vector that serves as the input to the generator.
self.dense1 and self.dense2: These are dense (fully connected) layers with 128 units each and ReLU (rectified linear unit) activations. These layers progressively transform the input vector.
self.out: This is the output layer of the generator. It also is a dense layer that uses a hyperbolic tangent (tanh) activation function to output a vector of size z_dim. The tanh function scales the output to the range [-1, 1], which should match the scale of the feature space of the input data to the discriminator.
call method: This method defines the computation from input to output using the defined layers. It is called when the generator model is used on input data.
Discriminator Class
Purpose: The Discriminator class is used to distinguish between real data and fake data generated by the generator. Its goal is to correctly classify input data as real or fake.
Constructor (__init__ method):
input_dim: The size of the input data. This should match the output dimension of the generator.
self.dense1 and self.dense2: These are similar to those in the generator, consisting of dense layers with 128 units each and ReLU activations.
self.out: The output layer of the discriminator. It is a dense layer with a single unit that outputs a probability (using a sigmoid activation function) indicating the likelihood that the input data is real.
call method: Similar to the generator, this method defines how the input data flows through the network, ending in a probability output that classifies the input as real or fake.
General Overview
In a GAN setup, these two models work adversarially:

Generator: Tries to produce data that is indistinguishable from real data, fooling the discriminator.
Discriminator: Tries to correctly classify real data from fake data generated by the generator.
The Generator and Discriminator classes are set up to be trained together in a loop where:

The generator generates "fake" data.
The discriminator attempts to classify all data (both real and fake).
Both networks adjust their parameters based on their successâ€”i.e., the discriminator getting better at telling real from fake and the generator getting better at producing more convincing fakes.
This process continues until a balance is found where the generator produces perfect fakes, or the discriminator becomes perfect at discrimination, which ideally never happens in a well-setup GAN.
